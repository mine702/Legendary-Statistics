# 1) 봇이면 빈 루트로, 아니면 정적 루트로
map $http_user_agent $static_root {
  default /usr/share/nginx/html;
  ~*(googlebot|google-inspectiontool|googleother|adsbot-google|mediapartners-google|bingbot|duckduckbot|facebookexternalhit|twitterbot|linkedinbot|slackbot|whatsapp|telegrambot|discordbot|applebot) /emptyroot;
}

# 2) 마지막 fallback URI 결정(봇=프리렌더, 일반=SPA index)
map $http_user_agent $fallback_uri {
  default /index.html;
  ~*(googlebot|google-inspectiontool|googleother|adsbot-google|mediapartners-google|bingbot|duckduckbot|facebookexternalhit|twitterbot|linkedinbot|slackbot|whatsapp|telegrambot|discordbot|applebot) /__prerender;
}

upstream prerender { server rendertron:3000; }

server {
  listen 3000;
  server_name tftmeta.co.kr;

  # 일반 루트, 하지만 location / 에서 변수 root로 덮어씁니다
  root /usr/share/nginx/html;
  index index.html index.htm;

  # 봇일 때 실패 유도를 위한 빈 디렉터리 준비(컨테이너에 실제로 존재해야 함)
  # 예: Dockerfile 또는 볼륨에 /emptyroot 만들어 두기
  # RUN mkdir -p /emptyroot

  location /uploads/ { alias /uploads/; autoindex off; }
  location = /robots.txt  { try_files /robots.txt  =404; }
  location = /sitemap.xml { try_files /sitemap.xml =404; }
  location = /ads.txt     { try_files /ads.txt     =404; }

  # 핵심 분기
  location / {
    root $static_root;                 # 봇이면 /emptyroot, 일반이면 /usr/share/nginx/html
    add_header Vary "User-Agent";
    try_files $uri $uri/ $fallback_uri;# 앞이 실패하면 봇=/__prerender, 일반=/index.html
  }

  # 내부 프리렌더 엔드포인트
  location = /__prerender {
    internal;
    add_header Vary "User-Agent";
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_read_timeout 30s;
    proxy_connect_timeout 10s;
    proxy_pass http://prerender/render/$scheme://$host$request_uri;
  }

  # API
  location /api/ {
    proxy_pass http://backend:8080;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}
